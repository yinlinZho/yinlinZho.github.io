---
layout: post
title: 协作性过滤
category: 读书
tags: 集体编程智慧
description: 推荐系统的一些东西
---

### 推荐系统

网站如何根据用户在网站上面的历史行为和用户群体偏好，猜测客户的偏好，来提供更好的服务。

### 协作型过滤：在一大群用户中，筛选出与某个用户相似度高的一小群用户群体，通过考察与目标用户偏好相似的群体，构建出一个推荐列表

首先我们需要在大量用户数据中筛选出与目标用户偏好相近的用户群体。假定所有用户数据用python字典pref={'person':{'movie':quality}}表示,每个用户person(i)对应偏好空间中的一个点pref[person(i)] = {'movie':quality}。通过计算目标点与其他点的距离，筛选出与目标点距离最近的k个点的集合，作为偏好相似的群体。

1.计算距离

欧几里德距离
<code>
{% highlight python linenos %}
def sim_Euclid(pref,person1,person2):
    si = {}
    for item in person1:
        if item in person2:
            si[item] = 1
    if len(si) == 0:
	    similiarty =  0
    else:
        distance = sum([pow(pref[person1][item] - pref[person2][item],2) for item in pref[person1] if item in pref[person2]])
        similarity = 1/(1+sqrt(distance))
	return similarity

{% endhighlight %}
</code>
皮尔逊相似度
<code>
{%highlight python linenos %}
def sim_pearson(pref,person1,person2):
    si = {}
    for item in pref[person1]:
        if item in pref[person2]:
            si[item] = 1
    n = len(si)
    if n ==0:
        similarity = 0
    else:
        sum1 = sum([pref[person1][item] for item in si])
        sum2 = sum([pref[person2][item] for item in si])
        sum1sq = sum([pow(pref[person1][item],2) for item in si])
        sum2sq = sum([pow(pref[person2][item],2) for item in si])
        pSum = sum([pref[person1][item]*pref[person2][item] for item in si])
        num = pSum -sum1 * sum2/n
        den = sqrt((sum1sq - pow(sum1,2)/n)*(sum2sq - pow(sum2,2)/n))
        if den == 0:
            similarity = 0
        else:
            similarity = num/den
    return similarity
{% endhighlight %}	

</code>

